_build_temp_file="tempr"
_run_temp_file="tempb"
_with_symbols=false
_output_file=""
function list_dependencies() {
    local file=$1
    local dependencies=$(grep ^#import $file | sed -e 's/^#import //' | tr -d ' ')
    for dependency in $dependencies
    do
	    echo "$file $dependency" >> $_build_temp_file
      
        list_dependencies $dependency
    done
}
function order_files() {
    local files=$(tsort < $_build_temp_file | tac)
    
    echo "$files"
}
function minify_script() { 
    sed -e '/^#import/d' $_output_file -e '/^#file=/d' -e '/^$/d' | cat > ${_build_temp_file} 
    mv ${_build_temp_file} ${_output_file}
}
function generate_script() {
    local start_file=$1
    list_dependencies $start_file
    local files=$(order_files)
    echo '' > $_output_file
    for file in $files
    do
        echo "#file=$file" >> $_output_file
        cat $file >> $_output_file
    done 
    if ! $_with_symbols ; then
        minify_script
    fi
}
function build() {
    local start_file=$1
    local name=1
    for i in $*
    do 
        name=$(($name + 1))
        case $i in
            --with-symbols )
                _with_symbols=true
            ;;
            --output | -o )
                _output_file=$(eval "echo \$${name}")
            ;;
        esac
    done
    generate_script $start_file 
}
function build_temp_script() {
    start_script=$1
    build $start_script -o $_run_temp_file --with-symbols
}
function link_error() {
    error=$1
    local number=$(echo "$error" | grep -oP "line [0-9]" | sed 's/line //')
    local file_header=$(head -$number "$_run_temp_file" | grep '^#file=' | tail -1)
    local file=$(echo "$file_header" | sed 's/#file=//')
    local file_line_number=$(grep -n "$file_header" $_run_temp_file | cut -d: -f1)
    error=${error/"$_run_temp_file:"/"$file:"}
    error=${error/"line $number:"/"line $file_line_number:"}
    echo "$error"
}
function show_script_output() {
    script_result=$1
    while read -r line; do
        if [[ "$line" =~ ^$_run_temp_file:.* ]] ; then
            local error=$(link_error "$line")
            echo "$error" 
        else
            echo "$line"
        fi
    done <<< "$script_result"
}
function run() {
    start_script=$1    
    build_temp_script $start_script
    local result=$(bash $_run_temp_file $@ 2>&1)
    show_script_output "$result"
}
case $1 in 
    --help )
        echo "Esta Ã© a ajuda"
    ;;
    build )
        echo '' > ${_build_temp_file}
        build ${@:2}
    ;;
    run )
        echo '' > ${_run_temp_file}
        run ${@:2}
    ;;
esac
if [ -f ${_build_temp_file} ] ; then
    rm ${_build_temp_file}
fi
if [ -f ${_run_temp_file} ] ; then
    rm ${_run_temp_file}
fi
